using Pkg
# Для создания и обучения нейронных сетей.
Pkg.add(PackageSpec(name="Flux", version="0.14.25"))
# Для моделирования и решения дифференциальных уравнений
Pkg.add(PackageSpec(name="DifferentialEquations", version="7.15.0"))
# Для автоматического дифференцирования в задачах, связанных с моделированием.
Pkg.add(PackageSpec(name="SciMLSensitivity", version="7.72.0"))
# Для методов оптимизации
Pkg.add(PackageSpec(name="Optimisers", version="0.3.4"))
Pkg.add("BSON")
Pkg.status()
using Optimisers
using SciMLSensitivity
using DifferentialEquations
using Flux
using Random
using BSON

# Параметры маятника.
m = Float32(0.2)   # Масса шарика (кг).
M = Float32(0.5)   # Масса тележки (кг).
L = Float32(0.3)   # Длина маятника (м).
g = Float32(9.81)  # Ускорение свободного падения (м/с^2).


#= 
Уравнения движения. Описывает динамическую модель системы "маятник на тележке" 
в виде уравнений движения.

Аргументы:
du: Вектор, куда записываются производные параметров (результат вычислений).
    Например, du = [dθ, dω, dx, dv], где:
    𝑑θ/𝑑𝑡 = ω,
    𝑑𝜔/𝑑𝑡 = угловое ускорение маятника,
    𝑑𝑥/𝑑𝑡 = 𝑣,
    𝑑𝑣/𝑑𝑡 = линейное ускорение тележки.
u:  Вектор текущего состояния системы, содержащий:
    θ — угол маятника относительно вертикали (в радианах).
    ω — угловую скорость маятника (рад/с).
    x — положение тележки (м).
    v — линейную скорость тележки (м/с). 
p:  Параметры внешнего воздействия. Здесь это вектор с единственным элементом:
    force (𝐹) — сила, приложенная к тележке.
t:  Время. В данном случае время явно не используется в уравнениях, но передается 
    для совместимости с численными методами решения ОДУ (обыкновенные дифференциальные 
    уравнения).
=#
function cartpole!(du, u, p, t)
    # Из вектора текущего состояния извлекаются значения угла, угловой скорости, положения и скорости.
    θ, ω, x, v = u
    force = p[1]  # сила, которая будет применена к тележке

    # Уравнения движения.
    # Угловая скорость маятника 𝜔 является производной угла 𝜃 (𝑑𝜃/𝑑𝑡=ω).
    dθ = ω
    
    # Линейная скорость тележки 𝑣 является производной положения 𝑥 (𝑑𝑥/𝑑𝑡=𝑣).
    dx = v

    # Линейное ускорение тележки (𝑑𝑣/𝑑𝑡).
    dv = (m * g * sin(θ) * cos(θ) - 7 / 3 * (force + m * L / 2 * ω^2 * sin(θ)))/(m * cos(θ)^2 - 7 /3 * M)
    #= 
    Угловое ускорение маятника (𝑑𝜔/𝑑𝑡), зависит от:
    силы тяжести (𝑔), 
    угла маятника (sin(𝜃)), 
    компоненты линейного ускорения тележки (𝑑𝑣), которая влияет на движение маятника через силу реакции.
    =#
    dω = 3 / (7L / 2) * (g * sin(θ) - dv * cos(θ))

    # Запись производных в du.
    du[1] = dθ
    du[2] = dω
    du[3] = dx
    du[4] = dv
end

#Загружаем модель
model_path = "model.bson"
BSON.@load model_path model
println("Модель загружена из $model_path")

u0 = Float32[pi/6, 0, 0, 0]
test_model(model, u0)