using Pkg
# –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ–±—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π.
Pkg.add(PackageSpec(name="Flux", version="0.14.25"))
# –î–ª—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–µ—à–µ–Ω–∏—è –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —É—Ä–∞–≤–Ω–µ–Ω–∏–π
Pkg.add(PackageSpec(name="DifferentialEquations", version="7.15.0"))
# –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∑–∞–¥–∞—á–∞—Ö, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
Pkg.add(PackageSpec(name="SciMLSensitivity", version="7.72.0"))
# –î–ª—è –º–µ—Ç–æ–¥–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
Pkg.add(PackageSpec(name="Optimisers", version="0.3.4"))
Pkg.add("BSON")
Pkg.status()
using Optimisers
using SciMLSensitivity
using DifferentialEquations
using Flux
using Random
using BSON

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—è—Ç–Ω–∏–∫–∞.
m = Float32(0.2)   # –ú–∞—Å—Å–∞ —à–∞—Ä–∏–∫–∞ (–∫–≥).
M = Float32(0.5)   # –ú–∞—Å—Å–∞ —Ç–µ–ª–µ–∂–∫–∏ (–∫–≥).
L = Float32(0.3)   # –î–ª–∏–Ω–∞ –º–∞—è—Ç–Ω–∏–∫–∞ (–º).
g = Float32(9.81)  # –£—Å–∫–æ—Ä–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–∞–¥–µ–Ω–∏—è (–º/—Å^2).


#= 
–£—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è. –û–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –º–æ–¥–µ–ª—å —Å–∏—Å—Ç–µ–º—ã "–º–∞—è—Ç–Ω–∏–∫ –Ω–∞ —Ç–µ–ª–µ–∂–∫–µ" 
–≤ –≤–∏–¥–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–π –¥–≤–∏–∂–µ–Ω–∏—è.

–ê—Ä–≥—É–º–µ–Ω—Ç—ã:
du: –í–µ–∫—Ç–æ—Ä, –∫—É–¥–∞ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–π).
    –ù–∞–ø—Ä–∏–º–µ—Ä, du = [dŒ∏, dœâ, dx, dv], –≥–¥–µ:
    ùëëŒ∏/ùëëùë° = œâ,
    ùëëùúî/ùëëùë° = —É–≥–ª–æ–≤–æ–µ¬†—É—Å–∫–æ—Ä–µ–Ω–∏–µ¬†–º–∞—è—Ç–Ω–∏–∫–∞,
    ùëëùë•/ùëëùë° = ùë£,
    ùëëùë£/ùëëùë° = –ª–∏–Ω–µ–π–Ω–æ–µ¬†—É—Å–∫–æ—Ä–µ–Ω–∏–µ¬†—Ç–µ–ª–µ–∂–∫–∏.
u:  –í–µ–∫—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π:
    Œ∏ ‚Äî —É–≥–æ–ª –º–∞—è—Ç–Ω–∏–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ (–≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö).
    œâ ‚Äî —É–≥–ª–æ–≤—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –º–∞—è—Ç–Ω–∏–∫–∞ (—Ä–∞–¥/—Å).
    x ‚Äî –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–ª–µ–∂–∫–∏ (–º).
    v ‚Äî –ª–∏–Ω–µ–π–Ω—É—é —Å–∫–æ—Ä–æ—Å—Ç—å —Ç–µ–ª–µ–∂–∫–∏ (–º/—Å). 
p:  –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–Ω–µ—à–Ω–µ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è. –ó–¥–µ—Å—å —ç—Ç–æ –≤–µ–∫—Ç–æ—Ä —Å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º:
    force (ùêπ) ‚Äî —Å–∏–ª–∞, –ø—Ä–∏–ª–æ–∂–µ–Ω–Ω–∞—è –∫ —Ç–µ–ª–µ–∂–∫–µ.
t:  –í—Ä–µ–º—è. –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –≤—Ä–µ–º—è —è–≤–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —É—Ä–∞–≤–Ω–µ–Ω–∏—è—Ö, –Ω–æ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è 
    –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —á–∏—Å–ª–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ —Ä–µ—à–µ–Ω–∏—è –û–î–£ (–æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–µ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ 
    —É—Ä–∞–≤–Ω–µ–Ω–∏—è).
=#
function cartpole!(du, u, p, t)
    # –ò–∑ –≤–µ–∫—Ç–æ—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è —É–≥–ª–∞, —É–≥–ª–æ–≤–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏, –ø–æ–ª–æ–∂–µ–Ω–∏—è –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏.
    Œ∏, œâ, x, v = u
    force = p[1]  # —Å–∏–ª–∞, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫ —Ç–µ–ª–µ–∂–∫–µ

    # –£—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è.
    # –£–≥–ª–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –º–∞—è—Ç–Ω–∏–∫–∞ ùúî —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π —É–≥–ª–∞ ùúÉ (ùëëùúÉ/ùëëùë°=œâ).
    dŒ∏ = œâ
    
    # –õ–∏–Ω–µ–π–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Ç–µ–ª–µ–∂–∫–∏ ùë£ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–æ–π –ø–æ–ª–æ–∂–µ–Ω–∏—è ùë• (ùëëùë•/ùëëùë°=ùë£).
    dx = v

    # –õ–∏–Ω–µ–π–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ —Ç–µ–ª–µ–∂–∫–∏ (ùëëùë£/ùëëùë°).
    dv = (m * g * sin(Œ∏) * cos(Œ∏) - 7 / 3 * (force + m * L / 2 * œâ^2 * sin(Œ∏)))/(m * cos(Œ∏)^2 - 7 /3 * M)
    #= 
    –£–≥–ª–æ–≤–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –º–∞—è—Ç–Ω–∏–∫–∞ (ùëëùúî/ùëëùë°), –∑–∞–≤–∏—Å–∏—Ç –æ—Ç:
    —Å–∏–ª—ã —Ç—è–∂–µ—Å—Ç–∏ (ùëî), 
    —É–≥–ª–∞ –º–∞—è—Ç–Ω–∏–∫–∞ (sin(ùúÉ)), 
    –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ª–∏–Ω–µ–π–Ω–æ–≥–æ —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ç–µ–ª–µ–∂–∫–∏ (ùëëùë£), –∫–æ—Ç–æ—Ä–∞—è –≤–ª–∏—è–µ—Ç –Ω–∞ –¥–≤–∏–∂–µ–Ω–∏–µ –º–∞—è—Ç–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ —Å–∏–ª—É —Ä–µ–∞–∫—Ü–∏–∏.
    =#
    dœâ = 3 / (7L / 2) * (g * sin(Œ∏) - dv * cos(Œ∏))

    # –ó–∞–ø–∏—Å—å –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö –≤ du.
    du[1] = dŒ∏
    du[2] = dœâ
    du[3] = dx
    du[4] = dv
end

#–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
model_path = "model.bson"
BSON.@load model_path model
println("–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ $model_path")

#—Ç–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å
#u1 - –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ 
u1 = Float32[pi/6, 0, 0, 0]
println("–ù–∞—á–∞–ª—å–Ω—ã–π —É–≥–æ–ª ", u1[1])

#–ü–æ–ª—É—á–∞–µ–º —Å–∏–ª—É –æ—Ç –º–æ–¥–µ–ª–∏
p = model(u1)
println("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è —Å–∏–ª–∞ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è F ", p[1])

#–í—Ä–µ–º—è –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ —Ç–µ–ª–µ–∂–∫—É
tspan = (Float32(0.0), Float32(0.02))

# –ü—Ä–∏ –ø–æ–º–æ—â–∏ ODEProblem –ø–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –¥–∏—Ñ—Ñ. —É—Ä-–∏–π
prob = ODEProblem(cartpole!, u1, tspan, p)

# –†–µ—à–∞–µ–º —Å–∏—Å—Ç–µ–º—É
sol = solve(prob)

println("—É–≥–æ–ª Œ∏ –ø–æ—Å–ª–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è: ", sol[1, end][1])
println("—Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —É–≥–ª–∞ œâ –ø–æ—Å–ª–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è", sol[2, end])
println("–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–ª–µ–∂–∫–∏ x –ø–æ—Å–ª–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è", sol[3, end])
println("—Å–∫–æ—Ä–æ—Å—Ç—å —Ç–µ–ª–µ–∂–∫–∏ v –ø–æ—Å–ª–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è", sol[4, end])

#u2 - –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
u2 = Float32[sol[1, end], sol[2, end], sol[3, end], sol[4, end]]
#–ü–æ–ª—É—á–∞–µ–º —Å–∏–ª—É –æ—Ç –º–æ–¥–µ–ª–∏
p = model(u2)
println("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è —Å–∏–ª–∞ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è F ", p[1])

#–í—Ä–µ–º—è –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ —Ç–µ–ª–µ–∂–∫—É
tspan = (Float32(0.0), Float32(0.02))
# –ü—Ä–∏ –ø–æ–º–æ—â–∏ ODEProblem –ø–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –¥–∏—Ñ—Ñ. —É—Ä-–∏–π
prob = ODEProblem(cartpole!, u2, tspan, p)
sol = solve(prob)  # –†–µ—à–∞–µ–º —Å–∏—Å—Ç–µ–º—É

println("—É–≥–æ–ª Œ∏ –ø–æ—Å–ª–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è: ", sol[1, end][1])
println("—Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —É–≥–ª–∞ œâ –ø–æ—Å–ª–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è", sol[2, end])
println("–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–ª–µ–∂–∫–∏ x –ø–æ—Å–ª–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è", sol[3, end])
println("—Å–∫–æ—Ä–æ—Å—Ç—å —Ç–µ–ª–µ–∂–∫–∏ v –ø–æ—Å–ª–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è", sol[4, end])